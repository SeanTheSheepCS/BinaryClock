/***************************************************************************
 *
 * System initialization code for the MSP430 IAR C/EC++ Compiler.
 *
 * Copyright 2002-2007 IAR Systems. All rights reserved.
 *
 * $Revision: 1.25 $
 *
 ***************************************************************************/

/************************ Revision History ****************************
YYYY-MM-DD  Comments
-------------------------------------------------------------------------------------------
2013-11-21  Complete port from ANT Key Fob firmware (again)

************************************************************************/

;*********************************************************************
; Firmware version (value is added to info memory below)
#define VERSION 1
;*********************************************************************

; There are two libraries provided with compilers from IAR Systems,
; CLib and DLib.  This file is designed to work with both libraries.
; Some parts of it is DLib-specific.  However, those parts will not
; be included when building an appplication using CLib.

#include "macros.m43"
#include "cfi.m43"
#include <msp430x21x2.h>
#include <io430x21x2.h>

    XCFI_NAMES libNames
    XCFI_COMMON libCommon, libNames

; ---------------------------------------------------------
; Define reset vector.

    MODULE  ?reset_vector

    RSEG    RESET:CONST:NOROOT(1)
    PUBLIC  ?reset_vector
    EXTERN  __program_start

?reset_vector:
    DC16    __program_start

    ENDMOD


; ---------------------------------------------------------
; Define NMI vector.

    MODULE  ?nmi_vector

    RSEG    NMI:CONST:NOROOT(1)
    PUBLIC  ?nmi_vector
    EXTERN  __program_start

?nmi_vector:
    DC16    __program_start

    ENDMOD

; ---------------------------------------------------------
; The cstartup code -- perform initialization, call __low_level_init, 
; and call main.  If main returns the exit system is started.

    MODULE  ?cstart

; Ensure that this is built with the same "position independent
; code" settings as the compiler uses.

    XPICRTMODEL

; Forward declarations of segments.

    RSEG    HEAP:DATA:NOROOT(1)
    RSEG    CSTACK:DATA:NOROOT

    RSEG    DATA16_Z:DATA:NOROOT
    RSEG    DATA16_I:DATA:NOROOT
    RSEG    DATA16_ID:DATA:NOROOT

		RSEG	DEVICE_INFO_SEGC:CONST:ROOT

firmware_version
  DC16  VERSION

/*
; Calibration values in case you happen to erase them...  No guarantees that they will
; match the ones you killed -- they were taken from an MSP430F2011.
; Requires uncommenting of the CAL_VALUES segment code in lnk430F2122_KEYFB.xcl

			RSEG	CAL_VALUES:CONST:ROOT

	DC16	0xffff, 0x8aba
	DC16	0x8f80, 0x8e87
	DC8		0x7e, 0x8d
	DC8		0xc2, 0x86
*/

; ---------------------------------------------------------
; System initialization.

    RSEG CSTART:CODE:NOROOT(1)
    PUBLIC  __program_start

		EXTERN  ?reset_vector
    REQUIRE ?reset_vector
    REQUIRE	?cstart_call_low_level_init
    REQUIRE ?cstart_call_main
 
__program_start:

    PUBLIC ?cstart_begin
?cstart_begin:

    MOV     #WDTPW + WDTHOLD, &WDTCTL_  ; Turn off the watchdog
	  MOV     #SFE(CSTACK), SP            ; Initialize SP to point to the top of the stack.

; -----------------------------------------------
; Segment initialization:
;
; xxx_Z  -- uninitialized data that are filled with zeros.
; xxx_I  -- initialized data that gets the values from the corresponding
;           xxx_ID segment.


#ifndef IGNORE_SEG_INIT
#ifndef IGNORE_DATA16_DATA


; Clear DATA16_Z.

     RSEG CSTART:CODE:NOROOT(1)
     PUBLIC  ?cstart_init_zero
     EXTERN  __data16_memzero

?cstart_init_zero:
     MOV     #SFB DATA16_Z,    CW0
     MOV     #sizeof DATA16_Z, CW1

     XCALL   #__data16_memzero


; Copy DATA16_ID to DATA16_I

     RSEG CSTART:CODE:NOROOT(1)
     PUBLIC  ?cstart_init_copy
     EXTERN  __data16_memcpy

?cstart_init_copy:
     MOV     #SFB DATA16_I,  CW0
     MOV     #SFB DATA16_ID, CW1

#if CALLING_CONVENTION == 1
     PUSH.W  #sizeof DATA16_I
     XCALL   #__data16_memcpy
     ADD     #2, SP

#else
     MOV     #sizeof DATA16_I, CW2

     XCALL   #__data16_memcpy
#endif ; CALLING_CONVENTION

#endif ; IGNORE_DATA16_DATA


; -----------------------------------------------
; Call __low_level_init to perform initialization before initializing
; segments and calling main. If the function returns 0 no segment
; initialization should take place.


    RSEG CSTART:CODE:NOROOT(1)
    PUBLIC  ?cstart_call_low_level_init
    EXTERN  __low_level_init
  

?cstart_call_low_level_init:
     XCALL   #__low_level_init

; -----------------------------------------------
; Call main() with no arguments and then exit using the return value
; of main as the parameter.

     RSEG CSTART:CODE:NOROOT(1)
     PUBLIC  ?cstart_call_main

     EXTERN  main
     EXTERN  exit

?cstart_call_main:
     XCALL   #main
     XCALL   #exit

     PUBLIC  ?cstart_end
?cstart_end:

     ENDMOD  __program_start


; ---------------------------------------------------------
; __low_level_init
;
; This function sets up the I/O, processor clock, Timer A, the flash timer, adc,
; spi and interrupts.  It also determines if the cstartup code should initialize 
; values in the the data segments by return 0 to the caller.
;
; Requires:
;	- 
;
; Promises:
;	- GPIOs are configured per the BNCLK schematics
;  - The external crystal oscillator is set as the main clock source
;  - The flash timer is set to use the DCO clock with the proper division
;  - The system interrupts are set, though interrupts are not enabled yet except for NMIs
; 	- Returns 0 in W0 (R12 as defined in macros.m43) to skip initialization
;	  of the data segments (change this to 1 to enable data seg. init)
;      - clk_error_bit is set if the 32kHz clock does not start properly

    MODULE  lowinit
    PUBLIC  __low_level_init
    RSEG    CODE:CODE:NOROOT(1)

__low_level_init:	
; For maximum power savings, the device runs off external crystal oscillator, LFXT1CLK.
; When everything is up and running:
;   - MCLK is sourced from LFXT1CLK with no scaling
;   - ACLK is sourced from LFXT1CLK and is the time base for TimerA with 1/8 scaling
;   - SMCLK is not required.
clock_setup
;  BIC.W   #OSCOFF, SR 				      ; Turn on LFXT1CLK osc. in status reg
  MOV.B   #10000111b, &BCSCTL1_     ; <7> [1] XT2 off
                                    ; <6> [0] LFXT1 in low frequency mode
                                    ; <5-4> [00] ACLK divider 1
                                    ; <3-0> [0111] default RSEL value for mid frequency range
  MOV.B	  #11001000b, &BCSCTL2_		  ; <7-6> [11] MCLK is LFXT1CLK or VLOCLK 
                                    ; <5-4> [00] MCLK divider is 1 
										                ; <3> [1] SMCLK to LFXT1CLK or VLOCLK 
                                    ; <2-1> [00] SMCLK divider 1
										                ; <0> [0] DCO on internal resistor
	MOV.B	  #00001100b, &BCSCTL3_		  ; <7-6> [00] Unused XT2 bits
                                    ; <5-4> [00] 32768-Hz crystal on LFXT1 
                                    ; <3-2> [11] see notes below 
                                    ; <1> [0] XT2 fault flag clear
                                    ; <0> [0] LFXT fault flag clear
;using ECS-.327-7-34B-TR crystal where CL=7pf > Load caps = (2*CL) - Cp = (2*7pF) - ~2pF =~ 12pF
;original design used 12pf external caps, XCAP values are 1,6,10 or 12.5pf so externals wont be 
;populated and 12.5 is selected in the BCSCTL3_ register. Future revisions could use different valued
;external caps as well as the internal capacitance to achieve a more stable oscillator


; Switch main clock to LFXT1 and turn off DCO
  BIS.B	  #11001000b, &BCSCTL2_	      ; MCLK and SMCLK are LFXT1CLK
	BIS.B	  #SCG0 + SCG1, SR				    ; Turn off DCO and SMCLK

gpio_setup
; Setup I/O per the following:
;  - P1.0 MINUTE_3 (active high)
;  - P1.1 MINUTE_2 (active high)
;  - P1.2 MINUTE_1 (active high)
;  - P1.3 MINUTE_0 (active high)
;  - P1.4 JTAG TCK no configuration
;  - P1.5 JTAG TMS no configuration
;  - P1.6 JTAG TDI no configuration
;  - P1.7 JTAG TDO no configuration

;  - P2.0 NC - output low
;  - P2.1 Input Button 0
;  - P2.2 HOUR_3 (active high)
;  - P2.3 MINUTE_5 (active high)
;  - P2.4 MINUTE_4 (active high)
;  - P2.5 input LOST_POWER_IND (interrupt)
;  - P2.6 TP4 XIN
;  - P2.7 TP3 XOUT

;  - P3.0 HOUR_3 (active high)
;  - P3.1 HOUR_3 (active high)
;  - P3.2 HOUR_3 (active high)
;  - P3.3 BUZZER
;  - P3.4 UART POMI/ input Button 1
;  - P3.5 UART PIMO/ Input Button 2
;  - P3.6 PM_IND (active high)
;  - P3.7 TICK (active high)

; Set up GPIO.  For data direction, 0 = input, 1 = output.
	MOV.B	#00000000b, &P1SEL_		  ; All pins GPIO
  MOV.B	#00000000b, &P1SEL2_		; All pins GPIO
  MOV.B	#00001111b, &P1DIR_		  ; LEDs are outputs
	MOV.B	#00001111b, &P1OUT_ 	  ; Start with all lights on
  
	MOV.B	#11000000b, &P2SEL_		  ; 6 & 7 are Xin and Xout rest GPIO
  MOV.B	#11000000b, &P2SEL2_		; 6 & 7 are Xin and Xout rest GPIO
	MOV.B	#00011100b, &P2DIR_		  ; LED's are outputs
  MOV.B	#00011100b, &P2OUT_ 	  ; Start with all lights on
  
	MOV.B	#00000000b, &P3SEL_		  ; All GPIO but might need to change this to access POMI and PIMO
	MOV.B	#11001111b, &P3DIR_		  ; Buttons are inputs rest are out
	MOV.B	#11000111b, &P3OUT_ 	  ; Start with all lights on


; Setup timerA
timerA_setup
	MOV.W	#0000000100010100b, &TACTL_	  ; <15-10> [000000] not used
                                      ; <9-8> [01] ACLK Timer A clock source
                                      ; <7-6> [11] Input divider /8
                                      ; <5-4> [01] Up mode 00 - stop mode
                                      ; <3> [0] not used
                                      ; <2> [1] Clear the timer
                                      ; <1> [1] Enable the timer interrupt
                                      ; <0> [0] Clear the interrupt flag
  MOV.W #0x0800, &TACCR0_             ;
  


; Setup the UART peripheral.  
uart_setup
  MOV.B #00000000b,&UCA0CTL0_         ; <7> [0] Parity disabled
                                      ; <6> [0] N/A
                                      ; <5> [0] LSB first
                                      ; <4> [0] 8-bit data
                                      ; <3> [0] One stop bit
                                      ; <2-1> [00] UART Mode
                                      ; <0> [0] Asynchronous mode
  MOV.B #01000001b, &UCA0CTL1_        ; <7-6> [01] USCI clock source is ACLK
                                      ; <5> [0] No Receive erroneous-character interrupt
                                      ; <4> [0] No Receive break character interrupt
                                      ; <3> [0] Not dormant
                                      ; <2> [0] N/A
                                      ; <1> [0] Next frame transmitted is not a break
                                      ; <0> [1] USCI in reset
  MOV.B #0x00, &UCA0BR0_              ; Set low byte of baud rate register                                      
  MOV.B #0x00, &UCA0BR1_              ; Set high byte of baud rate register                                      

; Setup interrupts.  The active interrupts in this program are:
;  - Port2.5: Lost Power Indicator Interrupt. changes the state machine to LP mode and turns off all outputs
;	   The interrupt should fire on a high-to-low transition of the active-low button.
;	 - TimerA during sleep -- enabled above

interrupt_setup
  BIC.B #ACCVIFG + OFIFG, &IFG1_      ; Clear NMI flags of interest
  MOV.B	#00100000b, &P2IES_		        ; Set LOST_POWER_IND interrupts on high-to-low transition
  MOV.B	#00100000b, &P2IE_		        ; Enables LOST_POWER_IND interrupts

  
low_level_init_end
	XRET                            
                                        
	ENDMOD

	END
